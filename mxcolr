#!/usr/bin/env bash

# set -o pipefail
# set -o errtrace
# source $MXS/m.lib/lib.mxtrap.sh

# if tty -s; then mlg interactive; else mlg none-intreractive;fi

 MXC_V='mxc-v1.3'                    ; export MXC_V
MXBASE=$(dirname "$(realpath "$0")") ; export MXBASE
MXDIST=$XDG_CONFIG_HOME/mxc          ; export MXDIST
MXTEMP=/tmp/mxc                      ; export MXTEMP

MXSNAP=$MXBASE/snapshots    ; export MXSNAP
MTHEME=$MXTEMP/theme.mx     ; export MTHEME
OTHEME=$MXDIST/theme.mx     ; export OTHEME

M_SEED=$MXTEMP/mx-seed      ; export M_SEED
O_SEED=$MXDIST/mx-seed      ; export O_SEED

if [ "$MXLIB" ]; then . "$MXLIB"/lib.common.sh 
else mlg () { echo "${FUNCNAME[1]}:${BASH_LINENO[1]} => ${*}" >> /tmp/mxsh.log; }; fi
# MXTEMP=$MXBASE/dist         ; export MXTEMP
# XSEED=$MXBASE/src/xseed.sh  ; X_OUT=$MXBASE/src/x_out.sh

mkdir "$MXDIST" -p 2>/dev/null || true 
mkdir "$MXSNAP" -p 2>/dev/null || true 
mkdir /tmp/{mxc,mxc_hist} 2>/dev/null || true 

##########

################################################################################################
# VARIABLES ####################################################################################
MX_CC=(C{00..15})  ; MX_TC=(T{00..15}) ; MX_ZC=("${MX_CC[@]}" "${MX_TC[@]}")      ; export MX_CC
MX_CX=(CX{1..6})   ; MX_TX=(TX{1..6})  ; MX_ZX=("${MX_CX[@]}" "${MX_TX[@]}")      ; export MX_CX
MX_CK=(DK{0..9})   ; MX_TK=(TK{0..9})  ; MX_ZK=("${MX_CK[@]}" "${MX_TK[@]}")      ; export MX_CK
MX_CL=(DL{0..9})   ; MX_TL=(TL{0..9})  ; MX_ZL=("${MX_CL[@]}" "${MX_TL[@]}")      ; export MX_CL
MX_CM=({SB,WB,EB,SF,WF,EF,XB,XF}G WBX) ; export MX_CM
MX_TM=(T{SB,WB,EB,SF,WF,EF,XB,XF} TFX) 
MX_ZM=("${MX_CM[@]}" "${MX_TM[@]}")    ; export MX_ZM
#...............................................................................................
################################################################################################
for src in "$MXBASE"/src/*.sh; do . "$src"; done
#  ............................ .........................................#
ClearTemp     () { Info ' Cleaning temp'       ; rm "$MXTEMP"/*         || { Info "empty dir    " 2 && echo "$MXTEMP" ; } }
LoadTempTheme () { Info ' Load Temp Theme'     ; . "$MTHEME" || . "$OTHEME" ; }
CopyTempSeed  () { Info ' Copy Temp Seed'      ; cp -v "$O_SEED" "$M_SEED" ; }
LoadProdTheme () { . "$OTHEME" || . "$MXBASE/data/sample_theme.mx" ; }
LoadTempSeed  () { Info ' Load Temp Seed'      ; . "$M_SEED" || . "$O_SEED" ; }
LoadProdSeed  () { . "$O_SEED" || . "$MXBASE/data/sample_mx-seed.mx" ; Info ' Load Live Seed' ; }
BackupDist    () { Info ' Backup Prod Dist ··' ; cp -v "$MXDIST" /tmp/mxc_hist/"$(date +%s)" -r ; }
#  ............................ .........................................#
LoadProdTheme
#  ............................ .........................................#
#  ............................ .........................................#
# ##############################
GetPlugName () {
  local BS="${BASH_SOURCE[1]}"; BS=${BS##*/}
  BS="${BS::-3}"; BS="${BS:2}"
  echo "$BS" 
}
SourcePlugs () { for plug in "$MXBASE"/plugins/*.sh; do . "$plug"; done; }
################################
# ##############################
# ////////////////////////////  
Demo () {
  Demo_block
  Demo_dot
  MXDotLine
  fillCols
}
DemoAll () {
  Demo_card
  Demo_slant
  Demo_shades3
  Demo_shades4

  Demo_dot_slant
  MXDotLine
  fillCols
}

LoadPreview () { CopyTempSeed ; LoadTempTheme ; apply_tmux ; }
RestoreTmux   () {
  [ -e "$MXDIST/tmuxpre" ] && cp "$MXDIST/tmuxpre" "$MXDIST/tmux.mx"
  [ "$TMUX" ] && apply_tmux
}
Revert () {
  ClearTemp
  CopyTempSeed
  UpdatePalette
  RestoreTmux
  Demo
}

ApplyPlugs () {
  BackupDist

  Demo
  ls "$MXTEMP" && PressToContinue "drafts ready" "$MXTEMP"

  ReleaseSeed
  ReleaseTheme

  for plug_path in "$MXBASE"/plugins/*.sh; do
    local plugname; plugname="$(basename "$plug_path" | cut -d'-' -f2 | cut -d'.' -f1)"

    [[ ! "$XOPT" == *"full"* ]] && PromptContinue "$plugname"
    [[ ! "$REPLY" =~ ^[Yy]$ ]] || [[ "$XOPT" == *"no$plugname"* ]] && InfoIgnore "$plugname" && continue 

    local applyfn="apply_${plugname}"; ! [[ "$XOPT" == *"full"* ]] && "$applyfn"
  done
}

ReGenerate () {
  UpdatePalette 
  SourcePlugs
  ApplyPlugs
} # ............................ #
Generate () {
  GeneratePalette

  [[ -n "$TMUX" ]] && . "$MXBASE"/plugins/2-tmux.sh

  Demo

  PrompRand
  case $REPLY in
    k ) Info 'Keeping draft ·'; SourcePlugs    ;;
    u ) Info 'Proceeding ····'; ReGenerate ;;
    n ) Info 'Again ·········'; Generate  ;;
    d ) Info 'Full Demo ·····'; DemoAll    ;;
    * ) Info 'Reverting ·····'; Revert     ;;
  esac
  mlg "━✔━━━┛"
} # ............................ #
{
  mlg "━━━━<XOPT>━━┓"
  menu="$1" ; shift ; XOPT="$*"
  [[ "$XOPT" == *"verbose"* ]] && VERBOSE=1
  mlg "━✔━━<XOPT>━━ ${XOPT}"
}
# ............................ #
{
  mlg "━━━━<MENU>━━┓"
  case $menu in
    -g | --generate     ) Generate      ;;
    -u | --update       ) ReGenerate    ;;
    -U | --update-force ) XOPT+='full'  ; ReGenerate ;;
    -d | --demo         ) Demo          ;;
    -D | --demo-all     ) DemoAll       ;;
    -i | --init         ) LoadPreview   ; Demo_block ;;
    -l | --list         ) ListSnapshots ;;
    -s | --save         ) SaveSnapshot  ;;
    -x1                 ) XP_1          ;;
    -x2                 ) XP_2          ;;
    *                   ) MXIntro       ;;
  esac
  mlg "━✔━━<MENU>━━┛"
}
# ............................ #

# MXDotLine
exit 0

# //////////////////////////// #
################################
