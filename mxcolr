#!/usr/bin/env bash

# set -o pipefail # set -o errtrace
# source $MXS/m.lib/lib.mxtrap.sh # if tty -s; then mlg interactive; else mlg none-intreractive;fi

 MXC_V='mxc-v1.4'
MXBASE=$(dirname "$(realpath "$0")")
MXDIST=~/.config/mxc
MXTEMP=/tmp/mxc
MXSNAP=$MXBASE/snapshots
MTHEME=$MXTEMP/root.mx
OTHEME=$MXDIST/root.mx
M_SEED=$MXTEMP/seed.mx
O_SEED=$MXDIST/seed.mx

if ! command -v pastel &> /dev/null; then echo "pastel not found."; echo " ==> https://github.com/sharkdp/pastel#installation"; exit 1; fi

if [ -d "$MXLIB" ]; then . "$MXLIB"/lib.common.sh; else mlg () { echo "${FUNCNAME[1]}:${BASH_LINENO[1]} => ${*}" >> /tmp/mxsh.log; }; fi

! [ -e "$O_SEED" ] && cp -v "$MXBASE/assets/samples/seed.mx" "$O_SEED" 
! [ -e "$OTHEME" ] && cp -v "$MXBASE/assets/samples/root.mx" "$OTHEME" 

. "$OTHEME"

mkdir "$MXDIST" -p 2>/dev/null || true 
mkdir "$MXSNAP" -p 2>/dev/null || true 
mkdir /tmp/{mxc,mxc_hist} 2>/dev/null || true 

# ########################################
# VARIABLES ##############################
MX_CC=(C{00..15}); MX_CX=(CX{1..6}); MX_CK=(DK{0..9}); MX_CL=(DL{0..9}) 
MX_CM=({S{B,F},W{B,F},E{B,F},X{B,F},O{B,F}}G W{B,F}X)
# ...
MX_VARS=( "${MX_CC[@]}" "${MX_CX[@]}" "${MX_CK[@]}" "${MX_CL[@]}" "${MX_CM[@]}" )
MX_TERM=( "${MX_VARS[@]/#/T}" )
# mapfile -t MX_VARS <<<"$(eval echo \$\{MX_C{C,X,K,L,M}\[\@\]\}))"
# ########################################
for src in "$MXBASE"/src/*.sh; do . "$src"; done
# ##############################
GetPlugName () { local BS="${BASH_SOURCE[1]}"; BS=${BS##*/}; BS="${BS::-3}"; BS="${BS:2}"; echo "$BS"; }
SourcePlugs () { for plug in "$MXBASE"/plugins/*.sh; do . "$plug"; done; }
# ##############################
Revert () {
  rm /tmp/mxc/*
  UpdatePalette
  . "$OTHEME"
  [[ -n "$TMUX" ]] && . "$MXBASE"/plugins/2-tmux.sh
  Demo
}

ApplyTemplates () {
  ! command -v envsubst &> /dev/null && Info 1 "envsubst command not found" && return 1
  for tpl_path in "$MXBASE"/templates/*; do
    local tpl="${tpl_path##*/}"
    envsubst < "$tpl_path" | tee \
      >(cat > /tmp/mxc/"$tpl") \
      >(cat > "$MXDIST/$tpl") &> /dev/null; # XXX read from env/config
  done
}
ApplyPlugs () {
  cp -v "$MXDIST" /tmp/mxc_hist/"$(date +%s)" -r
  # shellcheck disable=SC2046
  mapfile -t plugs <<<$(find "$MXBASE"/plugins -name "*.sh" -type f | sort)

  for plug_id in "${!plugs[@]}"; do
    local plug_path="${plugs[$plug_id]}"
    local plug="${plug_path##*/}"
    local pname="${plug#*-}";pname="${pname%.*}"

    local cols;cols=$(tput cols); local plug_len=${#plugs[@]}
    local progress;progress=$(echo "scale=0; $cols/$plug_len*($plug_id+1)" | bc -l)

    flll "$progress" '▔' "$C08"
    [[ $plug == "0-"* || "$XOPT" == *"no$pname"*  ]] && InfoIgnore "$pname" && continue
    PromptContinue "$plug" "${plugs[(plug_id-1)]}" "${plugs[(plug_id+1)]}"
    [[ ! "$REPLY" =~ ^[Yy]$ ]] && InfoIgnore "$pname" && continue

    local applyfn="apply_${pname}"; "$applyfn"
  done
}

ReGenerate () {
  UpdatePalette 
  SourcePlugs
  ReleaseSeed
  ReleaseTheme
  fillCols '▄'; fillCols '▀'; Demo
  (( "$1" )) && return
  ls "$MXTEMP"; PressToContinue "drafts ready" "$MXTEMP"
  # ............................ 
  ApplyTemplates
  ApplyPlugs
} 
# ............................ #
Generate () {
  rm /tmp/mxc/*
  GeneratePalette

  [[ -n "$TMUX" ]] && . "$MXBASE"/plugins/2-tmux.sh

  Demo

  PrompRand
  case $REPLY in
    k ) Info 'Keeping draft ·' ; SourcePlugs  ;;
    u ) Info 'Proceeding ····' ; ReGenerate   ;;
    n ) Info 'Again ·········' ; Generate     ;;
    d ) Info 'Full Demo ·····' ; DemoAll      ;;
    * ) Info 'Reverting ·····' ; Revert; ReGenerate 1 ;;
  esac
  mlg "━✔━━━┛"
} # ............................ #
{
  mlg "━━━━<XOPT>━━┓"
  menu="$1" ; shift ; XOPT="$*"
  [[ "$XOPT" == *"verbose"* ]] && VERBOSE=1
  mlg "━✔━━<XOPT>━━ ${XOPT}"
}
# ............................ #
{
  mlg "━━━━<MENU>━━┓"
  case $menu in
    -g | --generate     ) Generate      ;;
    -u | --update       ) ReGenerate    ;;
    -U | --update-force ) XOPT+='full'  ; ReGenerate ;;
    -d | --demo         ) Demo          ;;
    -D | --demo-all     ) DemoAll       ;;
    -i | --init         ) . "$MXBASE"/plugins/2-tmux.sh; apply_tmux 1; Demo_block ;;
    -l | --list         ) ListSnapshots ;;
    -s | --save         ) SaveSnapshot  ;;
    -x1                 ) Playground_1  ;;
    -x2                 ) Playground_2  ;;
    -x3                 ) Demo_hexes  ;;
    -xp                 ) expandp "$@"  ;;
    --darkest           ) darkest "$@";;
    --lightest          ) lightest "$@";;
    *                   ) MXIntro       ;;

  esac
  mlg "━✔━━<MENU>━━┛"
}
# ............................ #

# MXDotLine
exit 0

